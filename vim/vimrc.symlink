set nocompatible              " be iMproved, required
filetype off                  " required
set mousemodel=extend 	      " mouse scrolling?
set nowrap                    " disable line wrapping
set clipboard=unnamedplus     " Enables system clipboard support

set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
Plugin 'NLKNguyen/papercolor-theme'
Plugin 'tpope/vim-fugitive'
Plugin 'git://git.wincent.com/command-t.git'
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
Plugin 'dracula/vim'
Plugin 'nightsense/snow'
Plugin 'tomasiser/vim-code-dark'
Plugin 'jdkanani/vim-material-theme'
Plugin 'Xuyuanp/nerdtree-git-plugin'
Plugin 'christoomey/vim-tmux-navigator'
call vundle#end()            " required

" Put your non-Plugin stuff after this line

execute pathogen#infect()
" theme
" ----
syntax on
set t_Co=256 " tell vim we have 256-color term
set background=dark
"colorscheme material-theme
colorscheme PaperColor
" ----
" End theme

" Airline
let g:airline_theme='papercolor'
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_left_sep = "\ue0b8 "
let g:airline_right_sep = "\ue0ba "
" Always show statusline
" ------
set laststatus=2
" ------

" Set line number
set number
" copy (write) highlighted text to .vimbuffer
" from https://stackoverflow.com/questions/44480829/how-to-copy-to-clipboard-in-vim-of-bash-on-windows
vmap <C-c> y:new ~/.vimbuffer<CR>VGp:x<CR> \| :!cat ~/.vimbuffer \| clip.exe <CR><CR>
" paste from buffer
map <C-v> :r ~/.vimbuffer<CR>

" Nerdtree Settings
set mouse=a
" autocmd VimEnter * NERDTree | wincmd p
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
map <C-n> :NERDTreeToggle<CR>
let g:NERDTreeDirArrowExpandable = '▸'
let g:NERDTreeDirArrowCollapsible = '▾'
let NERDTreeQuitOnOpen = 1
let NERDTreeAutoDeleteBuffer = 1
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
set ttyfast
set lazyredraw
map tt :NERDTreeToggle<CR> "double click t button to toggle NerdTree
map [] :TagbarToggle<CR> "click [] to toggle Tagbar

filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
" filetype plugin on
set tabstop=2
set shiftwidth=2		" number of spaces to use for autoindenting
set autoindent 			" always set autoindenting on
set copyindent			" copy the previous indentation on autoindenting
set showmatch				" set show matching parentheses
set ignorecase			" ignore case when searching
set smartcase				" ignore case if search pattern is all lowercase, case-sensitive otherwise
set splitright			" open vertical splits to the right
set splitbelow			" open horizontal splits to the bottom
"set cursorline			" highlight current line
set smarttab				" insert tabs on start of a line according to shiftwidth, not tabstop
"set hlsearch				" highlight search terms
set incsearch				" show matches as you type
" turn off highlighting after search
nnoremap <leader><space> :noh<cr>
nnoremap <silent> <C-l> :nohl<CR><C-l>
" map Ctrl+Backspace to delete the previous word in insert mode
" Ctrl+Backspace sends ^_ sequence in MinTTY
imap <C-_> <C-W>
set ruler
set wildmenu
set formatoptions+=j
au BufEnter * set fo-=c fo-=r fo-=o " don't auto-comment on paste/enter
set autoread " autoread only execs on an external command or :e, so add the following
" trigger autoread whenever buffers switch or when focusing vim again
au FocusGained,BufEnter * :silent! !

" WSL yank support
" Thansk to /u/bravekarms here: https://www.reddit.com/r/vim/comments/7pmv3d/workflows_that_work/dskyram/
let s:clip = '/mnt/c/Windows/System32/clip.exe'  " default location
if executable(s:clip)
    augroup WSLYank
        autocmd!
        autocmd TextYankPost * call system(s:clip, join(v:event.regcontents, "\<CR>"))
    augroup END
end
